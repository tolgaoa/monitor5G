apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-configmap
data:
  amf.conf: |
    AMF =
    {
      INSTANCE_ID = 0 ;            # 0 is the default
      PID_DIRECTORY = "/var/run";   # /var/run is the default

      AMF_NAME = "OAI-AMF";

      RELATIVE_CAPACITY = 30;
      # Display statistics about whole system (in seconds)
      STATISTICS_TIMER_INTERVAL = 20;

      CORE_CONFIGURATION:
      {
        EMERGENCY_SUPPORT = "false";
      };

      GUAMI:
      {
        MCC = "{{ .Values.config.mcc }}"; MNC = "{{ .Values.config.mnc }}"; RegionID = "{{ .Values.config.regionId }}"; AMFSetID = "{{ .Values.config.amfSetId }}"; AMFPointer = "0"
      }

      SERVED_GUAMI_LIST = (
        {MCC = "{{ .Values.config.mcc }}"; MNC = "{{ .Values.config.mnc  }}"; RegionID = "{{ .Values.config.regionId }}"; AMFSetID = "{{ .Values.config.amfSetId }}"; AMFPointer = "0"}
        #48bits <MCC><MNC><RegionID><AMFSetID><AMFPointer>
      );

      PLMN_SUPPORT_LIST = ({
        MCC = "{{ .Values.config.mcc }}"; MNC = "{{ .Values.config.mnc }}"; TAC = {{ .Values.config.tac }};
        SLICE_SUPPORT_LIST = (
          {SST = {{ .Values.config.sst0 }}; SD = "{{ if .Values.config.sd0 }}{{ .Values.config.sd0 }}{{ else }}0xFFFFFF{{ end }}"}
          {{ if .Values.config.sst1}},{SST = {{ .Values.config.sst1 }}; SD = "{{ if .Values.config.sd1 }}{{ .Values.config.sd1 }}{{ else }}0xFFFFFF{{ end }}"}{{ end }}
          {{ if .Values.config.sst2}},{SST = {{ .Values.config.sst2 }}; SD = "{{ if .Values.config.sd2 }}{{ .Values.config.sd2 }}{{ else }}0xFFFFFF{{ end }}"}{{ end }}
          {{ if .Values.config.sst2}},{SST = {{ .Values.config.sst2 }}; SD = "{{ if .Values.config.sd2 }}{{ .Values.config.sd2 }}{{ else }}0xFFFFFF{{ end }}"}{{ end }}
         )
      });

      INTERFACES:
      {
        # AMF binded interface for N1/N2 interface (NGAP)
        NGAP_AMF:
        {
          INTERFACE_NAME = "{{ .Values.config.amfInterfaceNameForNGAP }}";
          IPV4_ADDRESS   = "read";
          PORT           = 38412;
          PPID           = 60;
        };

        # AMF binded interface for SBI (N11 (SMF)/N12 (AUSF), etc.)
        SBI:
        {
          INTERFACE_NAME = "{{ .Values.config.amfInterfaceNameForSBI }}";
          IPV4_ADDRESS   = "read";
          PORT           = {{ .Values.config.amfInterfaceSBIHTTPPort }};
          API_VERSION    = "v1";
          HTTP2_PORT     = {{ .Values.config.amfInterfaceSBIHTTP2Port }};

          SMF_INSTANCES_POOL = (
            {SMF_INSTANCE_ID = 1; IPV4_ADDRESS = "{{ if .Values.config.smfIpAddress }}{{ .Values.config.smfIpAddress }}{{ else }}127.0.0.1{{ end }}"; 
            PORT = "80"; HTTP2_PORT = 8080, VERSION = "{{ if .Values.config.smfApiVersion }}{{ .Values.config.smfApiVersion }}{{ else }}v1{{ end }}"; 
            FQDN = "{{ if .Values.config.smfFqdn }}{{ .Values.config.smfFqdn }}{{ else }}localhost{{ end }}", SELECTED = "true"}
          );
        };

        NRF :
        {
          IPV4_ADDRESS = "{{ if .Values.config.nrfIpAddress }}{{ .Values.config.nrfIpAddress }}{{ else }}127.0.0.1{{ end }}";
          PORT         = {{ if .Values.config.nrfPort }}{{ .Values.config.nrfPort }}{{ else }}80{{ end }};            # Default: 80
          API_VERSION  = "{{ if .Values.config.nrfApiVersion }}{{ .Values.config.nrfApiVersion }}{{ else }}v1{{ end }}";
          FQDN         = "{{ if .Values.config.nrfFqdn }}{{ .Values.config.nrfFqdn }}{{ else }}localhost{{ end }}"
        };

        AUSF :
        {
          IPV4_ADDRESS = "{{ if .Values.config.ausfIpAddress }}{{ .Values.config.ausfIpAddress }}{{ else }}127.0.0.1{{ end }}";
          PORT         = {{ if .Values.config.ausfPort }}{{ .Values.config.ausfPort }}{{ else }}80{{ end }};            # Default: 80
          API_VERSION  = "{{ if .Values.config.ausfApiVersion }}{{ .Values.config.ausfApiVersion }}{{ else }}v1{{ end }}";
          FQDN         = "{{ if .Values.config.ausfFqdn }}{{ .Values.config.ausfFqdn }}{{ else }}localhost{{ end }}"
        };

        UDM :
        {
          IPV4_ADDRESS = "{{ if .Values.config.udmIpAddress }}{{ .Values.config.udmIpAddress }}{{ else }}127.0.0.1{{ end }}";
          PORT         = {{ if .Values.config.udmPort }}{{ .Values.config.udmPort }}{{ else }}80{{ end }};    # Default: 80
          API_VERSION  = "{{ if .Values.config.udmApiVersion }}{{ .Values.config.udmApiVersion }}{{ else }}v2{{ end }}";
          FQDN         = "{{ if .Values.config.udmFqdn }}{{ .Values.config.udmFqdn }}{{ else }}localhost{{ end }}"
        };

        NSSF :
        {
          IPV4_ADDRESS = "{{ if .Values.config.nssfIpAddress }}{{ .Values.config.nssfIpAddress }}{{ else }}127.0.0.1{{ end }}";
          PORT         = {{ if .Values.config.nssfPort }}{{ .Values.config.nssfPort }}{{ else }}80{{ end }};            # Default: 80
          API_VERSION  = "{{ if .Values.config.nssApiVersion }}{{ .Values.config.nssApiVersion }}{{ else }}v1{{ end }}";
          FQDN         = "{{ if .Values.config.nssfFqdn }}{{ .Values.config.nssfFqdn }}{{ else }}localhost{{ end }}"
        };

      };

      SUPPORT_FEATURES:
      {
         # STRING, {"yes", "no"},
         NF_REGISTRATION = "{{ .Values.config.nfRegistration }}";  # Set to yes if AMF registers to an NRF
         NRF_SELECTION   = "{{ .Values.config.nrfSelection }}";    # Set to yes to enable NRF discovery and selection
         EXTERNAL_NRF    = "{{ .Values.config.externalNrf }}";     # Set to yes if AMF works with an external NRF
         SMF_SELECTION   = "{{ .Values.config.smfSelection }}";    # Set to yes to enable SMF discovery and selection
         EXTERNAL_AUSF   = "{{ .Values.config.externalAusf }}";    # Set to yes if AMF works with an external AUSF
         EXTERNAL_UDM    = "{{ .Values.config.externalUdm }}";     # Set to yes if AMF works with an external UDM
         EXTERNAL_NSSF   = "{{ .Values.config.externalNssf }}";    # Set to yes if AMF works with an external NSSF
         USE_FQDN_DNS    = "yes";   # Set to yes if AMF relies on a DNS to resolve NRF/SMF/UDM/AUSF's FQDN
         USE_HTTP2       = "{{ .Values.config.useHttp2 }}";        # Set to yes to enable HTTP2 for AMF server
      }

      AUTHENTICATION:
      {
        ## MySQL mandatory options
        MYSQL_server = "{{ if .Values.config.mySqlServer }}{{ .Values.config.mySqlServer }}{{ else }}mysql{{ end }}"; # MySQL Server address
        MYSQL_user   = "{{ if .Values.config.mySqlUser }}{{ .Values.config.mySqlUser }}{{ else }}linux{{ end }}";   # Database server login
        MYSQL_pass   = "{{ if .Values.config.mySqlPass }}{{ .Values.config.mySqlPass }}{{ else }}root{{ end }}";   # Database server password
        MYSQL_db     = "{{ if .Values.config.mySqlDb }}{{ .Values.config.mySqlDb }}{{ else }}oai_db{{ end }}";     # Your database name
        RANDOM = "true";
      };

      NAS:
      {
        ORDERED_SUPPORTED_INTEGRITY_ALGORITHM_LIST = {{ .Values.config.intAlgoList }} ;
        ORDERED_SUPPORTED_CIPHERING_ALGORITHM_LIST = {{ .Values.config.ciphAlgoList }} ;
      };
    };

    MODULES =
    {
      NGAP_MESSAGE = (
        {MSG_NAME = "NGSetupRequest"; ProcedureCode = 21; TypeOfMessage = "initialMessage"}
      );
    };